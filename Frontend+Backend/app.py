import joblib
import numpy as np
from flask import Flask,render_template,request,send_file
import io
import base64
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import matplotlib.pyplot as plt
import seaborn as sns
from joblib import load
from fpdf import FPDF

import datetime



app = Flask(__name__,template_folder="./")

model=joblib.load("job")


@app.route('/')
def hello_world():
    return render_template("waterqualityanalysis.html",pred="Water Potability Prediction")


@app.route('/predict',methods=['POST','GET'])
def predict():
    int_features=[float(x) for x in request.form.values()]
    data_to_be_predicted=np.array(int_features,ndmin=2)
    scaler=load('std_scaler.bin')
    print("data is ",data_to_be_predicted)
    data_to_be_predicted_normal = scaler.transform(data_to_be_predicted)
    print("updated data is ",data_to_be_predicted_normal)
    final_result=model.predict(data_to_be_predicted_normal)
    
    

    # PDF Start
    current_date=datetime.date.today()

    introduction1="This is the final report generated by the Deep Learning Model for Water Quality Analysis. This report"
    introduction2="helps to understand all the factors that affect water potability and train a machine learning model that"
    introduction3="can classify whether a specific water sample is safe or unfit for consumption."

    class PDF(FPDF):
        def header(self):
            # Logo
            self.image('header_img.png', 10, 8, 33)
            # Arial bold 15
            self.set_font('Arial', 'B', 20)
            # Move to the right
            self.cell(60)
            # Title
            self.cell(30, 25, 'Report - Water Quality Analysis','C')
            # Line break
            self.ln(42)
            #drawing a line
            self.line(10,42,200,42)

        # Page footer
        def footer(self):
            # Position at 1.5 cm from bottom
            self.set_y(-15)
            # Arial italic 8
            self.set_font('Arial', 'I', 8)
            # Page number
            self.cell(0, 10, 'Page ' + str(self.page_no()) + '/{nb}', 0, 0, 'C')

    # Instantiation of inherited class
    pdf = PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.set_font('Arial', '', 12)
    pdf.cell(0,6,introduction1,0,1,'')
    pdf.cell(0,6,introduction2,0,1,'')
    pdf.cell(0,6,introduction3,0,1,'')
    pdf.set_font('Courier', 'U', 11)
    # pdf.ln(20)
    pdf.cell(w=60, h=10, txt="Powered by dharantej1",border=0 , align="", link="https://github.com/dharantej1")
    pdf.ln(20)


    pdf.set_font('Arial', '', 12)


    columns=['pH', 'Hardness','Solids', 'Chloramines','Sulfate', 'Conductivity','Organic_carbon', 'Trihalomethanes','Turbidity']
    expected_values=[7.085990,195.968072,21917.441375,7.134338,333.224672,426.526409,14.357709,66.400859,3.969729]
    actual_values=[float(x) for x in request.form.values()]
    percentage_changes=[]


    pdf.set_font('Arial', 'B', 12)


    pdf.cell(55,10,"Parameters",0,0,"C")
    pdf.cell(30,10,"Expected Values",0,0,"C")
    pdf.cell(58,10,"Actual Values",0,0,"C")
    pdf.cell(30,10,"Percentage Change",0,1,"C")

    pdf.set_font('Arial', '', 12)


    for i in range(9):
        error=(actual_values[i]-expected_values[i])/(expected_values[i])
        percentage_changes.append(str(round(error*100,3))+"%")
    percentage_changes=percentage_changes[::-1]


    for i in range(9):
        pdf.cell(15)
        pdf.cell(50,10,str(columns[i]),0,1)

    expected_values=expected_values[::-1]
    for i in range(9):
        pdf.cell(60)
        pdf.cell(60,-10,str(expected_values[i]),0,1)

    for i in range(9):
        pdf.cell(100)
        pdf.cell(70,10,str(actual_values[i]),0,1)

    for i in range(9):
        pdf.cell(150)
        pdf.cell(80,-10,percentage_changes[i],0,1)


    pdf.set_font('Arial', 'B', 20)
    
    pdf_name='WQA_Report_'+str(current_date)
    
    if abs(final_result)>0.5:
        pdf.cell(0,-25,"Water is Suitable for Drinking",0,1,"C")
        pdf.output(pdf_name+".pdf", 'F')
        print("PDF Report is saved in the current directory as: ",pdf_name)
        return render_template("waterqualityanalysis.html",pred="The Sample of Water is Suitable for Drinking")
    else:
        pdf.output(pdf_name+".pdf", 'F')
        print("PDF Report is saved in the current directory as: ",pdf_name)
        pdf.cell(0,-25,"Water is Not Suitable for Drinking",0,1,"C")
        return render_template("waterqualityanalysis.html",pred="The Sample of Water is Not Suitable for Drinking")
        # PDF End


if __name__ == '__main__':
    app.run(debug=True)